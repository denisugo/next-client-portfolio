const { Builder, until } = require("selenium-webdriver");
const { selectUserError } = require("../../features/UserSlice/UserSlice");
const {
  findByDataTestSelenium,
  findByComponentSelenium,
} = require("../../utils/testUtils");

const driver = new Builder().forBrowser("chrome").build();
// Creates a new line in the cart table, should be removed manually
//TODO: test with user admin cookie,
describe("Selenium Product page", () => {
  const nonAdminUsername = "davy000";
  const nonAdminPassword = "treasure";
  const adminUsername = "jb";
  const adminPassword = "secret";

  const productName = "HomeOffice";

  beforeAll(async () => {
    await driver.get(
      "http://localhost:3000/product?id=10&name=HomeOffice&description=New+energy+pills+for+your+productive+life&price=250&preview=https%3A%2F%2Fimages.unsplash.com%2Fphoto-1612475498158-014b71f98625%3Fixlib%3Drb-1.2.1%26ixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26auto%3Dformat%26fit%3Dcrop%26w%3D2028%26q%3D80"
    );
  });

  afterAll(async () => {
    await driver.manage().deleteAllCookies();
  });
  afterAll(async () => {
    await driver.quit();
  });

  describe("User flow", () => {
    it("Should open product page", async () => {
      //Page title
      const title = await driver.getTitle();
      expect(title).toBe(productName); // generated by product name

      // Nav bar conten
      const svgs = await findByComponentSelenium("svg", driver); // Navigation icons
      expect(svgs.length).toBe(3);
      const logo = await findByDataTestSelenium("logo", driver);
      expect(logo.length).toBe(1);

      // Product page content
      const name = await findByComponentSelenium("h2", driver);
      expect(name.length).toBe(1);
      expect(await name[0].getText()).toBe(productName);

      const youShouldLogin = await findByDataTestSelenium(
        "you-should-login",
        driver
      );
      expect(youShouldLogin.length).toBe(1);
    });

    //   It will create a user cookie for futher updating its details
    it("Should log in", async () => {
      //Stores the original tab
      const originalWindow = await driver.getWindowHandle();
      //Locates a button to log in
      const youShouldLogin = await findByDataTestSelenium(
        "you-should-login",
        driver
      );

      // Initiates login flow
      youShouldLogin[0].click();

      //Waits for the new window or tab
      await driver.wait(
        async () => (await driver.getAllWindowHandles()).length === 2,
        10000
      );

      //Loops through until we find a new window handle
      const windows = await driver.getAllWindowHandles();
      windows.forEach(async (handle) => {
        if (handle !== originalWindow) {
          await driver.switchTo().window(handle);
        }
      });

      // Standard login process from login page test
      const button = (await findByDataTestSelenium("button", driver))[0]; //  Log me in
      const usernameField = (await findByDataTestSelenium("input", driver))[0];
      const passwordField = (await findByDataTestSelenium("input", driver))[1];

      await usernameField.sendKeys(nonAdminUsername);
      await passwordField.sendKeys(nonAdminPassword);

      const actions = driver.actions({ async: true });
      await actions.move({ origin: button }).press().release().perform();

      await driver.wait(until.urlIs("http://localhost:3000/user"), 3000);
      const url = await driver.getCurrentUrl();
      expect(url).toBe(`http://localhost:3000/user`);

      // Returns to the original tav
      await driver.switchTo().window(originalWindow);
      // Reloads the page
      await driver.navigate().refresh();

      const quantity = await findByDataTestSelenium("input", driver);
      expect(quantity.length).toBe(1);
    });
    //TODO: Test when clicking on add then redirecting to cart page and check if it is added

    it("Should add an item to a cart", async () => {
      let button = (await findByDataTestSelenium("button", driver))[0]; // add to cart button
      button.click();

      // Redirecting to cart page
      const navigation = await findByDataTestSelenium("navigation", driver);
      const link = (await findByComponentSelenium("a", navigation[0]))[1]; //  cart link
      link.click();

      // Checks if the page address is correct
      await driver.wait(until.urlIs("http://localhost:3000/cart"), 3000);

      // Checks the number of cart items (new cart item data test id added)
      let cartItem = await findByDataTestSelenium("cart-item", driver);
      expect(cartItem.length).toBe(1);

      button = (await findByDataTestSelenium("button", driver))[0]; // remove cart item button
      button.click();

      // Now the cart item should be deleted
      await driver.wait(async () => {
        cartItem = await findByDataTestSelenium("cart-item", driver);
        return cartItem.length === 0;
      }, 3000);
    });
    // it("Should add an item to a cart with quanttiy of 2", async () => {
    //   const quantity = (await findByDataTestSelenium("input", driver))[0];
    //   await quantity.sendKeys(2);

    //   const button = (await findByDataTestSelenium("button", driver))[0];
    //   button.click();
    // });
  });
});
